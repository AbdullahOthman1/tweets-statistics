[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Abdullah\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Abdullah\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.8 (Oracle Corporation Java 1.8.0_202)
[debug]       Load.loadUnit: plugins took 165.0932ms
[debug]       Load.loadUnit: defsScala took 0.5173ms
[debug] [Loading] Scanning directory C:\Users\Abdullah\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Abdullah\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 54.8259 ms
[debug]           Load.resolveProject(global-plugins) took 216.9866ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Abdullah\.sbt\1.0\plugins, plugins: List(<none>))) took 320.2021ms
[debug] [Loading] Done in C:\Users\Abdullah\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 357.7237ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.4343ms
[debug]     Load.loadUnit(file:/C:/Users/Abdullah/.sbt/1.0/plugins/, ...) took 535.3921ms
[debug]   Load.apply: load took 774.453ms
[debug]   Load.apply: resolveProjects took 9.3889ms
[debug]   Load.apply: finalTransforms took 81.2025ms
[debug]   Load.apply: config.delegates took 17.8193ms
[debug]   Load.apply: Def.make(settings)... took 585.5499ms
[debug]   Load.apply: structureIndex took 193.0241ms
[debug]   Load.apply: mkStreams took 2.2612ms
[info] loading global plugins from C:\Users\Abdullah\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3473.3801ms
[debug]           Load.loadUnit: plugins took 45.0215ms
[debug]           Load.loadUnit: defsScala took 0.0071ms
[debug] [Loading] Scanning directory C:\Users\Abdullah\Desktop\BigDataProject\project
[debug]             Load.loadUnit: mkEval took 14.0668ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Abdullah\Desktop\BigDataProject\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.8092 ms
[info] loading settings for project bigdataproject-build from idea.sbt ...
[debug]               Load.resolveProject(bigdataproject-build) took 4.2238ms
[debug]             Load.loadTransitive: finalizeProject(Project(id bigdataproject-build, base: C:\Users\Abdullah\Desktop\BigDataProject\project, plugins: List(<none>))) took 8.1557ms
[debug] [Loading] Done in C:\Users\Abdullah\Desktop\BigDataProject\project, returning: (bigdataproject-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3817.6651ms
[debug]           Load.loadUnit: cleanEvalClasses took 15.899ms
[debug]         Load.loadUnit(file:/C:/Users/Abdullah/Desktop/BigDataProject/project/, ...) took 3879.9669ms
[debug]       Load.apply: load took 3882.6884ms
[debug]       Load.apply: resolveProjects took 0.3082ms
[debug]       Load.apply: finalTransforms took 17.8371ms
[debug]       Load.apply: config.delegates took 4.8541ms
[debug]       Load.apply: Def.make(settings)... took 118.6102ms
[debug]       Load.apply: structureIndex took 38.9631ms
[debug]       Load.apply: mkStreams took 0.0027ms
[info] loading project definition from C:\Users\Abdullah\Desktop\BigDataProject\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 6236.3892ms
[debug]     Load.loadUnit: defsScala took 0.0033ms
[debug] [Loading] Scanning directory C:\Users\Abdullah\Desktop\BigDataProject
[debug]       Load.loadUnit: mkEval took 0.2623ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.9107 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 39.3189ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Abdullah\Desktop\BigDataProject, plugins: List(<none>))) took 44.4049ms
[debug] [Loading] Done in C:\Users\Abdullah\Desktop\BigDataProject, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 3492.6997ms
[debug]     Load.loadUnit: cleanEvalClasses took 26.0931ms
[debug]   Load.loadUnit(file:/C:/Users/Abdullah/Desktop/BigDataProject/, ...) took 9755.9598ms
[debug] Load.apply: load took 9758.2958ms
[debug] Load.apply: resolveProjects took 0.1158ms
[debug] Load.apply: finalTransforms took 30.3787ms
[debug] Load.apply: config.delegates took 0.3258ms
[debug] Load.apply: Def.make(settings)... took 78.066ms
[debug] Load.apply: structureIndex took 24.7568ms
[debug] Load.apply: mkStreams took 0.0018ms
[info] set current project to BigDataProject (in build file:/C:/Users/Abdullah/Desktop/BigDataProject/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 52248 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 52248, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to BigDataProject (in build file:/C:/Users/Abdullah/Desktop/BigDataProject/)
[debug] > Exec(idea-shell, None, None)
